#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import sys
import json

import argparse
import logging
logger = logging.getLogger()

try:
    pkg = __import__("HiggsAnalysis.fake-factor-application.calculate_fake_factors")
    ff_tools = getattr(pkg, "fake-factor-application").calculate_fake_factors
except:
    sys.path.append(os.path.join(os.environ['CMSSW_BASE'], "src/HiggsAnalysis/fake-factor-application/python"))
    ff_tools = __import__("calculate_fake_factors")


def setup_logging(output_file, level=logging.DEBUG):
    logger.setLevel(level)
    formatter = logging.Formatter("%(name)s - %(levelname)s - %(message)s")

    handler = logging.StreamHandler()
    handler.setFormatter(formatter)
    logger.addHandler(handler)

    file_handler = logging.FileHandler(output_file, "w")
    file_handler.setFormatter(formatter)
    logger.addHandler(file_handler)


def parse_arguments():
    parser = argparse.ArgumentParser(
        description="Calculate fake factors and create friend trees.")
    parser.add_argument(
        "--input",
        required=True,
        type=str,
        help="Input file.")
    parser.add_argument(
        "--input_friends",
        nargs='+',
        type=str,
        default=[],
        help="List of files with friend trees.")
    parser.add_argument(
        "--folder",
        required=True,
        type=str,
        help=
        "Directory within rootfile."
    )
    parser.add_argument(
        "--tree",
        default="ntuple",
        type=str,
        help=
        "Name of the root tree."
    )
    parser.add_argument(
        "--first_entry",
        required=True,
        type=int,
        help=
        "Index of first event to process."
    )
    parser.add_argument(
        "--last_entry",
        required=True,
        type=int,
        help=
        "Index of last event to process."
    )
    parser.add_argument(
        "--enable_logging",
        action="store_true",
        help=
        "Enable loggging for debug purposes."
    )
    parser.add_argument(
        "--cmsswbase",
        default=os.environ['CMSSW_BASE'],
        help=
        "Set path for to local cmssw for submission with Grid-Control"
    )
    parser.add_argument('--determine-fractions', action='store_false', default=True, help='determine fractions')
    parser.add_argument('--use-mva-tauid', action='store_true', default=False, help='use mva tau id')
    parser.add_argument('--use-ztt', action='store_true', default=False, help='use mva tau id')
    parser.add_argument("--fractionsfile", default="", type=str, help="fractionsfile")
    parser.add_argument("--configkey", type=str, default="", help="configkey")
    parser.add_argument("--tag", type=str, default='smhtt', help="Tag of output files.")
    parser.add_argument("--output-dir", type=str, default='.', help="Tag of output files.")

    return parser.parse_args()


def main(args):

    nickname = os.path.basename(args.input).replace(".root", "")

    # Get path to cmssw and fakefactordatabase
    cmsswbase = args.cmsswbase
    if args.use_mva_tauid:
        fakefactordatabase = {
            "2016": {
                "et": cmsswbase + "/src/HTTutilities/Jet2TauFakes/data_2016/SM2016/tight/vloose/et/fakeFactors_tight.root",
                "mt": cmsswbase + "/src/HTTutilities/Jet2TauFakes/data_2016/SM2016/tight/vloose/mt/fakeFactors.root",
                "tt": cmsswbase + "/src/HTTutilities/Jet2TauFakes/data_2016/SM2016/tight/vloose/tt/fakeFactors_tight.root"
            },
            "2017": {
                "et": cmsswbase + "/src/HTTutilities/Jet2TauFakes/data_2017/SM2017/tight/vloose/et/fakeFactors.root",
                "mt": cmsswbase + "/src/HTTutilities/Jet2TauFakes/data_2017/SM2017/tight/vloose/mt/fakeFactors.root",
                "tt": cmsswbase + "/src/HTTutilities/Jet2TauFakes/data_2017/SM2017/tight/vloose/tt/fakeFactors.root"
            },
            "2018": {
                "et": cmsswbase + "/src/HTTutilities/Jet2TauFakes/data_2018/SM2018/tight/vloose/et/fakeFactors.root",
                "mt": cmsswbase + "/src/HTTutilities/Jet2TauFakes/data_2018/SM2018/tight/vloose/mt/fakeFactors.root",
                "tt": cmsswbase + "/src/HTTutilities/Jet2TauFakes/data_2018/SM2018/tight/vloose/tt/fakeFactors.root"
            }
        }
    else:
        fakefactordatabase = {
            "2016": {
                "et": cmsswbase + "/src/HTTutilities/Jet2TauFakes/data_2016/SM2016/tight/vloose/et/fakeFactors.root",
                "mt": cmsswbase + "/src/HTTutilities/Jet2TauFakes/data_2016/SM2016/tight/vloose/mt/fakeFactors.root",
                "tt": cmsswbase + "/src/HTTutilities/Jet2TauFakes/data_2016/SM2016/tight/vloose/tt/fakeFactors.root"
            },
            "2017": {
                "et": cmsswbase + "/src/HTTutilities/Jet2TauFakes/data_2017/SM2017/tight/vloose/et/fakeFactors.root",
                "mt": cmsswbase + "/src/HTTutilities/Jet2TauFakes/data_2017/SM2017/tight/vloose/mt/fakeFactors.root",
                "tt": cmsswbase + "/src/HTTutilities/Jet2TauFakes/data_2017/SM2017/tight/vloose/tt/fakeFactors.root"
            },
            "2018": {
                "et": cmsswbase + "/src/HTTutilities/Jet2TauFakes/data_2018/SM2018/tight/vloose/et/fakeFactors.root",
                "mt": cmsswbase + "/src/HTTutilities/Jet2TauFakes/data_2018/SM2018/tight/vloose/mt/fakeFactors.root",
                "tt": cmsswbase + "/src/HTTutilities/Jet2TauFakes/data_2018/SM2018/tight/vloose/tt/fakeFactors.root"
            }
        }

    # Determine era
    with open(cmsswbase + "/src/HiggsAnalysis/friend-tree-producer/data/input_params/datasets.json") as json_file:
        datasets = json.load(json_file)
    era = str(datasets[nickname]["year"])

    # Load fractions
    if args.determine_fractions:
        conf_default = {
            'categories': {
                'et': ['inclusive'],
                'mt': ['inclusive'],
                'tt': ['inclusive'],
            }
        }
        if args.use_mva_tauid:
            conf_default['categories']['tt'] = ['tt1_inclusive', 'tt2_inclusive']  # for last available mva ff
        conf = {
            'categories': {
                args.folder[:2]: conf_default['categories'][args.folder[:2]]
            }
        }
        default_fractionsfile = {
            "2016": {
                "mt": "/work/jbechtel/postprocessing/fraction_nmssm/output/shapes/2016_mt_nbtag3bins_mt_1_puppi/2016-2016_mt_nbtag3bins_mt_1_puppi-mt-shapes.root",
                "et": "/work/jbechtel/postprocessing/fraction_nmssm/output/shapes/2016_et_nbtag3bins_mt_1_puppi/2016-2016_et_nbtag3bins_mt_1_puppi-et-shapes.root",
                "tt": "/work/jbechtel/postprocessing/fraction_nmssm/output/shapes/2016_tt_njets3bins_m_vis/2016-2016_tt_njets3bins_m_vis-tt-shapes.root"
            },
            "2017": {
                "mt": "/work/jbechtel/postprocessing/fraction_nmssm/output/shapes/2017_mt_nbtag3bins_mt_1_puppi/2017-2017_mt_nbtag3bins_mt_1_puppi-mt-shapes.root",
                "et": "/work/jbechtel/postprocessing/fraction_nmssm/output/shapes/2017_et_nbtag3bins_mt_1_puppi/2017-2017_et_nbtag3bins_mt_1_puppi-et-shapes.root",
                "tt": "/work/jbechtel/postprocessing/fraction_nmssm/output/shapes/2017_tt_njets3bins_m_vis/2017-2017_tt_njets3bins_m_vis-tt-shapes.root"
            },
            "2018": {
                "mt": "/work/jbechtel/postprocessing/fraction_nmssm/output/shapes/2018_mt_nbtag3bins_mt_1_puppi/2018-2018_mt_nbtag3bins_mt_1_puppi-mt-shapes.root",
                "et": "/work/jbechtel/postprocessing/fraction_nmssm/output/shapes/2018_et_nbtag3bins_mt_1_puppi/2018-2018_et_nbtag3bins_mt_1_puppi-et-shapes.root",
                "tt": "/work/jbechtel/postprocessing/fraction_nmssm/output/shapes/2018_tt_njets3bins_m_vis/2018-2018_tt_njets3bins_m_vis-tt-shapes.root"
            }
        }
        default_configkey = "nbtag3bins_mt_1_puppi" if args.folder[:2] in ["mt", "et"] else "njets3bins_m_vis"
        fractionsfile = args.fractionsfile
        if fractionsfile == "":
            fractionsfile = default_fractionsfile[era][args.folder[:2]]
        configkey = args.configkey
        if configkey == "":
            configkey = default_configkey

        fractions = ff_tools.determine_fractions(
            config=conf,
            configkey=configkey,
            fractionsfile=fractionsfile,
            era=era,
            emb=not args.use_ztt,
            tag=args.tag,
            era_labels={
                era: 'Run%s' % (era)
            }
        )
    else:
        fractions = ff_tools.load_fractions(
            configpath="",
            configkey="",
            use_fractions_from_workspace=True,
            workspace="%s/src/HiggsAnalysis/friend-tree-producer/data/input_params/htt_ff_fractions_%s.root"%(cmsswbase, era),
            fractionfiles="", era=era
        )

    # Create friend tree
    output_path = os.path.join(args.output_dir, nickname)
    if not os.path.exists(output_path):
        os.makedirs(output_path)

    ff_tools.apply_fake_factors(
        datafile=args.input,
        # proper input friend files according to the channel are provided by job manager. Other channels won't be used.
        friendfilelists={
            "et": args.input_friends,
            "mt": args.input_friends,
            "tt": args.input_friends
        },
        outputfile=os.path.join(output_path, "%s_%s_%s_%s.root" % (nickname, args.folder, args.first_entry, args.last_entry)),
        category_mode="inclusive",
        fakefactordirectories=fakefactordatabase[era],
        fractions=fractions,
        use_fractions_from_workspace=False if args.determine_fractions else True,
        configpath=cmsswbase + "/src/HiggsAnalysis/fake-factor-application/config.yaml",
        expression=configkey,
        era=era,
        pipeline_selection=args.folder,
        treename=args.tree,
        eventrange=[args.first_entry, args.last_entry],
        rootfilemode="recreate",
        use_mva_tauid=args.use_mva_tauid
    )


if __name__ == "__main__":
    args = parse_arguments()

    if args.enable_logging:
        setup_logging(
            "FakeFactors_%s_%s_%s_%s.log" % (
                os.path.basename(args.input).replace(".root", ""),
                args.folder,
                args.first_entry,
                args.last_entry
            ),
            logging.DEBUG
        )

    main(args)
